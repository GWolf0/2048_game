var g=Object.defineProperty;var f=(c,t,s)=>t in c?g(c,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):c[t]=s;var l=(c,t,s)=>(f(c,typeof t!="symbol"?t+"":t,s),s);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))o(e);new MutationObserver(e=>{for(const i of e)if(i.type==="childList")for(const r of i.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&o(r)}).observe(document,{childList:!0,subtree:!0});function s(e){const i={};return e.integrity&&(i.integrity=e.integrity),e.referrerPolicy&&(i.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?i.credentials="include":e.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function o(e){if(e.ep)return;e.ep=!0;const i=s(e);fetch(e.href,i)}})();function B(c,t,s=[]){let o=0,e=Math.floor(Math.random()*(t-c))+c;for(;s.includes(e)&&(e=Math.floor(Math.random()*(t-c))+c,o++,!(o>100)););return e}const u=class u{static init(t){u.onKey=t,window.addEventListener("keyup",s=>{const o=s.key;t(o)})}};l(u,"onKey");let h=u;const n=class n{constructor(){l(this,"gameState");l(this,"steps");l(this,"blocks");l(this,"slots");l(this,"blocksContainer");l(this,"stepsLabel");l(this,"retryBtn");l(this,"isMoving");l(this,"willMergeAtAnimationEnd");this.blocksContainer=document.getElementById(n.blocksContainerID),this.stepsLabel=document.getElementById(n.stepsLabelID),this.retryBtn=document.getElementById(n.retryBtnID),window.addEventListener("resize",()=>{this.redrawBlocks()}),this.retryBtn.onclick=t=>this.onRetry(),h.init(t=>this.checkInputs(t)),this.resetGame(),document.getElementById("logBtn").onclick=()=>this.onLogBtn()}get canMove(){return!this.isMoving&&this.gameState===0}onLogBtn(){console.log(this.blocks),console.table(this.slots.map(t=>t.map(s=>s==null?void 0:s.num))),console.log("________________")}start(){this.addNewRandomBlock(),this.addNewRandomBlock(),this.gameState=0}resetGame(){if(this.gameState=1,this.blocks){console.log(this.blocks);for(let t=this.blocks.length-1;t>=0;t--)this.removeBlock(this.blocks[t])}else this.blocks=[];this.slots=Array(4).fill(null).map((t,s)=>[null,null,null,null]),this.isMoving=!1,this.willMergeAtAnimationEnd=[],this.steps=0,this.stepsLabel.innerText=`Steps: ${this.steps}`}onRetry(){confirm("Retry")&&(this.resetGame(),this.start())}checkInputs(t){t==="ArrowUp"?this.move(1):t==="ArrowDown"?this.move(3):t==="ArrowLeft"?this.move(4):t==="ArrowRight"&&this.move(2)}redrawBlocks(){this.blocksContainer.innerHTML="",this.blocks.forEach((t,s)=>{t&&(t.elem=n.createNewBlockElem(t.num,s),this.addBlockToDOM(t))})}move(t){if(this.canMove){switch(this.isMoving=!0,t){case 1:this.blocks.sort((s,o)=>s.row-o.row).forEach((s,o)=>this.moveBlock(s,t));break;case 3:this.blocks.sort((s,o)=>o.row-s.row).forEach((s,o)=>this.moveBlock(s,t));break;case 4:this.blocks.sort((s,o)=>s.col-o.col).forEach((s,o)=>this.moveBlock(s,t));break;case 2:this.blocks.sort((s,o)=>o.col-s.col).forEach((s,o)=>this.moveBlock(s,t));break}setTimeout(()=>this.onMoveFinished(),n.moveAnimationDuration)}}moveBlock(t,s){switch(s){case 1:{const o=this.getFilledSlotsCountAtCol(t.col,t.row-1,!0);let e=-t.row+o;this.slots[t.row][t.col]=null;const i=this.getBlockAt(t.col,t.row+e-1);i&&i.num===t.num&&!i.justMerged&&(t.num=i.num=t.num*2,e--,this.willMergeAtAnimationEnd.push([t,i]),t.justMerged=!0,i.justMerged=!0),t.row+=e,this.slots[t.row][t.col]=t;const r=parseInt(t.elem.style.top)+n.getBlockSize()*e+n.blocksContainerPadding*e;t.elem.style.top=`${r}px`}break;case 3:{const o=this.getFilledSlotsCountAtCol(t.col,t.row+1);let e=3-t.row-o;this.slots[t.row][t.col]=null;const i=this.getBlockAt(t.col,t.row+e+1);i&&i.num===t.num&&!i.justMerged&&(t.num=i.num=t.num*2,e++,this.willMergeAtAnimationEnd.push([t,i]),t.justMerged=!0,i.justMerged=!0),t.row+=e,this.slots[t.row][t.col]=t;const r=parseInt(t.elem.style.top)+n.getBlockSize()*e+n.blocksContainerPadding*e;t.elem.style.top=`${r}px`}break;case 4:{const o=this.getFilledSlotsCountAtRow(t.row,t.col-1,!0);let e=-t.col+o;this.slots[t.row][t.col]=null;const i=this.getBlockAt(t.col+e-1,t.row);i&&i.num===t.num&&!i.justMerged&&(t.num=i.num=t.num*2,e--,this.willMergeAtAnimationEnd.push([t,i]),t.justMerged=!0,i.justMerged=!0),t.col+=e,this.slots[t.row][t.col]=t;const r=parseInt(t.elem.style.left)+n.getBlockSize()*e+n.blocksContainerPadding*e;t.elem.style.left=`${r}px`}break;case 2:{const o=this.getFilledSlotsCountAtRow(t.row,t.col+1);let e=3-t.col-o;this.slots[t.row][t.col]=null;const i=this.getBlockAt(t.col+e+1,t.row);i&&i.num===t.num&&!i.justMerged&&(t.num=i.num=t.num*2,e++,this.willMergeAtAnimationEnd.push([t,i]),t.justMerged=!0,i.justMerged=!0),t.col+=e,this.slots[t.row][t.col]=t;const r=parseInt(t.elem.style.left)+n.getBlockSize()*e+n.blocksContainerPadding*e;t.elem.style.left=`${r}px`}break}}addNewRandomBlock(){if(this.blocks.length===16)return;const t=Math.random()>.1?2:4;this.addNewBlockAt(t)}addNewBlockAt(t,s=-1){const o=s>-1?s:B(0,16,this.blocks.filter((a,d)=>a!==null).map((a,d)=>n.get1DIndex(a.col,a.row))),e=n.get2DIndices(o),i=n.createNewBlockElem(t,o),r={uid:n.BLOCKS_UIDS++,num:t,elem:i,col:e[0],row:e[1],justMerged:!1};this.slots[r.row][r.col]=r,this.blocks.push(r),this.addBlockToDOM(r)}addBlockToDOM(t){t.elem=n.createNewBlockElem(t.num,n.get1DIndex(t.col,t.row)),this.blocksContainer.appendChild(t.elem),setTimeout(()=>{t.elem.style.transform="scale(1.1)",setTimeout(()=>{t.elem.style.transform="scale(1)"},n.mergeAnimationDuration*.5)},100)}removeBlock(t){var s;(s=t.elem.parentElement)==null||s.removeChild(t.elem),this.blocks=this.blocks.filter((o,e)=>o!==t)}onMoveFinished(){this.willMergeAtAnimationEnd.forEach(t=>{const s=t[0].num,o=[t[0].col,t[0].row],e=n.get1DIndex(o[0],o[1]);this.removeBlock(t[0]),this.removeBlock(t[1]),this.addNewBlockAt(s,e)}),this.willMergeAtAnimationEnd=[],this.addNewRandomBlock(),this.isMoving=!1,this.gameState=this.checkGameOverOrGameDone(),this.gameState===1?this.onGameDone():this.gameState===2&&this.onGameOver(),this.steps++,this.stepsLabel.innerText=`Steps: ${this.steps}`}checkGameOverOrGameDone(){if(this.blocks.find((t,s)=>t.num===2048))return 1;if(this.blocks.length===16){for(let t in this.blocks)if(this.checkBlockMergePossibility(this.blocks[t]))return 0}else return 0;return 2}checkBlockMergePossibility(t){const s=this.getBlockAt(t.col,t.row-1);if(s&&s.num===t.num)return!0;const o=this.getBlockAt(t.col,t.row+1);if(o&&o.num===t.num)return!0;const e=this.getBlockAt(t.col-1,t.row);if(e&&e.num===t.num)return!0;const i=this.getBlockAt(t.col+1,t.row);return!!(i&&i.num===t.num)}onGameDone(){setTimeout(()=>{alert(`Game Done!
2048 Reached!`)},n.mergeAnimationDuration)}onGameOver(){setTimeout(()=>{alert("Game Over!")},n.mergeAnimationDuration)}getBlockAt(t,s){return this.blocks.find((o,e)=>o&&o.col===t&&o.row===s)}getFilledSlotsCountAtRow(t,s=0,o=!1){return o?this.slots[t].filter((e,i)=>i<=s&&e).length:this.slots[t].filter((e,i)=>i>=s&&e).length}getFilledSlotsCountAtCol(t,s=0,o=!1){let e=0;return this.slots.forEach((i,r)=>{(!o&&r>=s&&i[t]!=null||o&&r<=s&&i[t]!=null)&&e++}),e}static createNewBlockElem(t,s){const o=n.getBlockSize(),e=document.createElement("div");e.className=`moveableGameBlock gameBlock-${t} ${t>=128?"lightText":""}`,e.innerText=t.toString(),e.style.width=`${o}px`,e.style.height=`${o}px`;const i=n.getBlockPositionAtIdx(s);return e.style.left=`${i[0]}px`,e.style.top=`${i[1]}px`,e}static getBlockPositionAtIdx(t){const s=n.getBlockSize(),o=n.get2DIndices(t),e=o[0]*s+(o[0]+1)*n.blocksContainerPadding,i=o[1]*s+(o[1]+1)*n.blocksContainerPadding;return[e,i]}static getBlockSize(){return document.getElementById("specialRefBlock").getBoundingClientRect().width}static get2DIndices(t){const s=t%4,o=Math.floor(t/4);return[s,o]}static get1DIndex(t,s){return t+s*4}};l(n,"BLOCKS_UIDS",1),l(n,"blocksContainerID","gameBlocksContainer"),l(n,"stepsLabelID","gameStepsLabel"),l(n,"retryBtnID","gameRetryBtn"),l(n,"blocksContainerPadding",12),l(n,"blockSpeed",1*7),l(n,"moveAnimationDuration",700),l(n,"mergeAnimationDuration",700);let m=n;const w=new m;w.start();
